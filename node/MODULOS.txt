NODE E MÓDULOS:

    -> basicamente, o node é um "ambiente" do computador que pode ser acessado e podem ser extraídas informações através da linguagem javascript.
    -> Dentro do node, temos acesso a certas bibliotecas (os chamados módulos) que nos permitem interagir com essas informações internas (operating system, file system ...) que podem vir a ser relevantes para determinados tipos de projetos

______________________________________________________________________________________________________________

OS (OPERATING SYSTEM)

    -> const os = require('os');
    -> Esse módulo disponibiliza diversas funções que você pode usar para obter informações do sistema operacional e do computador em que o programa está executando, e interagir com ele.

os.arch() => declara o tipo de arquitetura do processador (x64, arm, etc);
os.cpus() => retorna informaçoes sobre as CPUs disponíveis do sistema
os.freemem() => retorna o numero de bytes que representam a memoria livre do sistema
os.totalmem() => retorna o numero de bytes da memoria total do sistema
    -> os.freemem * 100 / os.totalmem => indica porcentagem de uso da memória
os.homedir() => indica o caminho do diretório home/principal do usuário que está usando
os.networkInterfaces() => retorna os detalhes das interfaces de rede do sistema (endereço ip etc)
os.type() => indica o sistema operacional (linux, darwin [macOS], windows)
os.uptime() => indica o tempo (em segundos) que o computador está ligado desde o último reinicio

                EX: -> pegar informaçoes de memoria do sistema operacional

                        const os = require('os')

                        const getMemoryInfo = () => {
                            const memoria = {
                            free: os.freemem(),
                            total: os.totalmem()
                            };
                            memoria.usagePercentage = `${(mem.free * 100 / mem.total)}%`;
                            return mem;
                        }

                        console.table(getMemoryInfo())
______________________________________________________________________________________________________________

FS (FILE SYSTEM)

    -> const fs = require('fs');

fs.appendFile('nomeDoArquivo/caminhoDoArquivo', 'mensagem', (err) => {if (err) console.log(err);} ) => adiciona um conteúdo a um arquivo existente. se ele nao existir, cria-se ele
fs.copyFile("arquivoFonte.txt", "arquivoDeDestino.txt", err => {if(err) console.log(err)}) => copia o conteudo de um file para outro
fs.rename('nomeAntigo', 'nomeNovo', err => {if (err) return err}) => renomeia um arquivo
pegar nome de arquivos:

        const fs = require('fs').promises; // pegando esse comando de file system da biblioteca do node
        const path = require('path'); //

        async function readdir(caminhoDir) {
            caminhoDir = caminhoDir || path.resolve(__dirname); // caso nao coloque o caminho do diretorio na chamada da funcao, ira dar diretamente o atual

            const files = await fs.readdir(caminhoDir);

            walk(files);
        };

        function walk(files) {
            for (let i = 0; i < files.length; i++) {
                console.log(files[i]);
            };
        };

        readdir(); // para pegar o caminho de um diretorio é so digitar "pwd" no terminal e, caso queira ir mais superficialmente, dar um "cd" para voltar um diretório

______________________________________________________________________________________________________________

PATH (PATH)
    -> const path = require('path');
    -> indica caminho de arquivos/diretorios

console.log(__dirname) => vai logar o caminho até chegar no diretório atual
console.log(__filename) => vai logar o caminho até chegar no file atual
path.join('diretorioSuperior', 'diretorioInferior', 'arquivo') => vai mostrar o caminho até tal file baseado no nome das suas pastas e de seu proprio nome
    => obs: podemos colocar quantos parametros quisermos
    => ex de uso: no appendFile
        fs.appendFile(path.join(__dirname, 'arquivo.txt), 'Bom dia, Antonio!', (err) => {if (err) console.log(err);}

______________________________________________________________________________________________________________

HTTP (HYPER TEXT TRANSFER PROTOCOL)

    -> const http = require('http')
    -> É um módulo que transfere dados através de um protocolo HTTP
    -> Este módulo pode criar um servidor HTTP que escuta através de portas e da uma resposta ao cliente

http.createServer()
______________________________________________________________________________________________________________


EXEMPLOS:

-> Gravar num arquivo.txt há cada 1s os status de memória:

            const os = require('os');
            const fs = require('fs');
            const path = require('path');

            const stats = {
                total : parseInt(os.totalmem() / 1024 / 1024),
                mem : parseInt(os.freemem() / 1024 / 1024),
                usagePercentage: parseInt((os.freemem()/os.totalmem()) * 100)
            }

            setInterval( () => {fs.appendFile(path.join(__dirname, 'teste.txt'),
                                `${JSON.stringify(stats)}\n`, 
                                err => {if (err) throw err;})}, 1000);