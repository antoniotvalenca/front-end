ASYNC ACTIONS / ACTION CREATORS

-> São actions que lidam com dados que são absorvidos pelo fetch
-> é o redux-thunk que define os action creators como assincronos
    -> npm i redux-thunk axios
-> geralmente, a estrutura fica:

    state = {
        loading: true/false, // display a loading spinner
        data: [], // o payload
        error: '' //display error to the user
    }

    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    actions
        -> FETCH_USERS_REQUESTED (fetch user list)
        -> FETCH_USERS_SUCCEDED (fetched successfully)
        -> FETCH_USERS_FAILED (error when fetching the data)

    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    reducers
        -> case: FETCH_USERS_REQUESTED
                loading: true
        -> case: FETCH_USERS_SUCCEEDED
                loading: false
                users: data (from API)
        -> case: FETCH_USERS_FAILED
                loading: false
                error: error (from API)

    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    const redux = require('redux');
    const createStore = redux.createStore;

    const initialState = {
        loading: false,
        users: [],
        error: ''
    }

    const fetchUsersRequest = () => {
        return {
            type: "FETCH_USERS_REQUESTED",
        }
    }

    const fetchUsersSuccess = users => {
        return {
            type: "FETCH_USERS_SUCCEDED",
            payload: users
        }
    }

    const fetchUsersFailure = error => {
        return {
            type: "FETCH_USERS_FAILED",
            payload: error
        }
    }

    const reducer = (state = initialState, action) => {
        switch (action.type) {
            case "FETCH_USERS_REQUESTED":
                return { ...state, loading: true }

            case "FETCH_USERS_SUCCEEDED":
                return { loading: false, users.action.payload, error: ''}

            case "FETCH_USERS_FAILED":
                retuurn { loading: false, users: [], error: action.payload }
        }
    }

    const store = createStore(reducer)

    // preguiça de acabar! se tiver duvida volto a estudar