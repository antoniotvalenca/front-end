ASYNC ACTIONS

-> São actions assincronas, como requisições, chamadas à APIs, etc.
-> Elas são criadas pela função createAsyncThunk('nomeSlice/nomeAction', async () => { *código* })
-> Todo slice que tiver uma função assincrona, precisa guardar as propriedades "loading" e "error"
-> Essas operações assincronas criadas pelo createAsyncThunk passam automaticamente por 3 estados:

    1. pending
        -> a operação está em processo
    2. fullfiled
        -> a operação foi bem sucedidamente concluída
    3. rejected
        -> a operação foi rejeitada

-> e, por fim, elas são registradas na parte do extraReducers

entenda:
____________________________________________________________________________________________________________________________________
=================                                     ARQUIVO: USERSLICE.JS                                        =================
------------------------------------------------------------------------------------------------------------------------------------

import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

const initialState = { // O INITIAL STATE, CONTENDO OBRIGATORIAMENTE O LOADING E O ERROR
    userData: null,
    loading: false,
    error: null,
};

const fetchUserData = createAsyncThunk('user/fetchUserData', async (userId) => { // A ASYNC ACTION
    const response = await fetch(`https://api.example.com/users/${usersId}`);
    const data = await response.json();

    return data;
});

const userSlice = createSlice({
    name: 'user',
    initialState,
    reducers: {},
    extraReducers: (builder) => {
        builder
            .addCase(fetchUserData.pending, (state) => {
                state.loading = true;
                state.error = null;
            })
            .addCase(fetchUserData.fulfilled, (state, action) => {
                state.userData = action.payload;
                state.loading = false;
            })
            .addCase(fetchUserData.rejected, (state, action) => {
                state.loading = false;
                state.error = action.error.message;
            })
    }
});

export default userSlice.reducer; // importo no store.js

____________________________________________________________________________________________________________________________________
=================                                     ARQUIVO: STORE.JS                                            =================
------------------------------------------------------------------------------------------------------------------------------------

import userReducer from '../features/userSlice.js';
import { configureStore } from '@reduxjs/toolkit'

const store = configureStore({
    reducer: {
        user: userReducer
    }
})

export default store;
